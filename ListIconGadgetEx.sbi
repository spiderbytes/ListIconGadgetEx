DeclareModule ListIconGadgetEx
  
  EnableExplicit
  
  Declare SetRowHeight(ListIconGadget, RowHeight)
  Declare SetHeaderHeight(ListIconGadget, HeaderHeight)
  
  Declare BindCellClick(ListIconGadget, Callback)
  Declare UnbindCellClick(ListIconGadget)
  
  Declare SetEvenRowColor(ListIconGadget, RowColor.s, SelectedRowColor.s, TextColor.s, SelectedTextColor.s)
  Declare SetOddRowColor (ListIconGadget, RowColor.s, SelectedRowColor.s, TextColor.s, SelectedTextColor.s)
  
  Declare SetColumnHeaderColor(ListIconGadget, Column, BackColor.s, FrontColor.s)
  
  Declare SetColumnHeaderAlignment(ListIconGadget, Column, Alignment.s)
  Declare SetColumnAlignment(ListIconGadget, Column, Alignment.s)
  
  Declare RenderCell(ListIconGadget, Column, Callback)
  
  Declare ColumnIsSortable(ListIconGadget, Column, IsSortable)
  Declare SetSortCallback(ListIconGadget, Callback)
  
EndDeclareModule

Module ListIconGadgetEx
  
  EnableExplicit
  
  Macro GetGadgetID(ListIconGadget)
    If IsGadget(ListIconGadget) = 0 : ProcedureReturn : EndIf
    If GadgetType(ListIconGadget) <> #PB_GadgetType_ListIcon : ProcedureReturn : EndIf
    Protected GadgetID = GadgetID(ListIconGadget)
  EndMacro
  
  Macro GetGrid
    GetGadgetID(ListIconGadget)
    ! var grid = v_gadgetid.gadget;
  EndMacro
  
  Procedure SetHeaderHeight(ListIconGadget, HeaderHeight)
    
    GetGrid
    
    ! $('#ColumnHeaderHeight_' + grid.id).remove();
    
    ! var style = "<style type='text/css' id='ColumnHeaderHeight_" + grid.id + "'>" + 
    !             " #" + grid.id + " [role='columnheader'] {height:" + v_headerheight + "px;line-height:" + v_headerheight + "px;}" + 
    !             "</style>"
    
    ! $(style).appendTo("head");
    
  EndProcedure   
  
  Procedure SetRowHeight(ListIconGadget, RowHeight)
    
    GetGrid
    
    ! spider.DojoAspect.after( grid, 'renderRow', function( row, args ) {
    !		var div = $(row).find("td.dgrid-cell").find("div").find("div");
    ! 	div.css('height', v_rowheight + 'px');
    ! 	div.css('line-height', v_rowheight + 'px');
    ! 	return row;
    ! });
    
  EndProcedure
  
  Procedure BindCellClick(ListIconGadget, Callback)
    
    GetGrid
    
    ! if (typeof grid.cellClickHandler === 'undefined') grid.cellClickHandler = [];
    
    ! grid.cellClickHandler.push(grid.on('.dgrid-header .dgrid-cell:click', function (e) {
    ! 	v_callback(v_listicongadget, grid.cell(e).column.index, -1);
    ! }));
    
    ! grid.cellClickHandler.push(grid.on('.dgrid-row .dgrid-cell:click', function (e) {
    ! 	v_callback(v_listicongadget, grid.cell(e).column.index, grid.cell(e).row.id);
    ! }));
    
  EndProcedure
  
  Procedure UnbindCellClick(ListIconGadget)
    
    GetGrid
    
    ! if (grid.cellClickHandler) {
    !   for (var counter = 0; counter < grid.cellClickHandler.length; counter ++) {
    !     grid.cellClickHandler[counter].remove();
    !   }
    ! }
    
  EndProcedure
  
  Procedure SetEvenRowColor(ListIconGadget, RowColor.s, SelectedRowColor.s, TextColor.s, SelectedTextColor.s)
    
    GetGrid
    
    ! $('#EvenRowColorStyle_' + grid.id).remove();
    
    ! var style = "<style type='text/css' id='EvenRowColorStyle_" + grid.id + "'>" + 
    !             " #" + grid.id + " .dgrid-row-even.dgrid-selected {background:" + v_selectedrowcolor + ";color:" + v_selectedtextcolor + ";}" + 
    !             " #" + grid.id + " .dgrid-row-even {background:" + v_rowcolor + ";color:" + v_textcolor + ";}" + 
    !             "</style>"
    
    ! $(style).appendTo("head");
    
  EndProcedure
  
  Procedure SetOddRowColor(ListIconGadget, RowColor.s, SelectedRowColor.s, TextColor.s, SelectedTextColor.s)
    
    GetGrid
    
    ! $('#OddRowColorStyle_' + grid.id).remove();
    
    ! var style = "<style type='text/css' id='OddRowColorStyle_" + grid.id + "'>" + 
    !             " #" + grid.id + " .dgrid-row-odd.dgrid-selected {background:" + v_selectedrowcolor + ";color:" + v_selectedtextcolor + ";}" + 
    !             " #" + grid.id + " .dgrid-row-odd {background:" + v_rowcolor + ";color:" + v_textcolor + ";}" + 
    !             "</style>"
    
    ! $(style).appendTo("head");
    
  EndProcedure
  
  Procedure SetColumnHeaderColor(ListIconGadget, Column, BackColor.s, FrontColor.s)
    GetGrid
    ! var id = "ligchc_" + grid.id + "_" + v_column;
    ! $("#" + id).remove();
    ! $("<style id='" + id + "'>" + "#" + grid.id + " .dgrid-column-" + v_column + "[role='columnheader'] { color: " + v_frontcolor + "; background-color: " + v_backcolor + "; }</style>").appendTo("head");
  EndProcedure  
  
  Procedure SetColumnHeaderAlignment(ListIconGadget, Column, Alignment.s)
    GetGrid
    ! var id = "ligcha_" + grid.id + "_" + v_column;
    ! $("#" + id).remove();
    ! $("<style id='" + id + "'>" + "#" + grid.id + " .dgrid-column-" + v_column + "[role='columnheader'] { text-align: " + v_alignment + ";}</style>").appendTo("head");
  EndProcedure
  
  Procedure SetColumnAlignment(ListIconGadget, Column, Alignment.s)
    GetGrid
    ! var id = "ligca_" + grid.id + "_" + v_column;
    ! $("#" + id).remove();
    ! $("<style id='" + id + "'>" + "#" + grid.id + " .dgrid-column-" + v_column + "[role='gridcell'] { text-align: " + v_alignment + ";}</style>").appendTo("head");
  EndProcedure
  
  Procedure RenderCell(ListIconGadget, Column, Callback)
    
    Protected Lig
    Protected Col
    Protected Row
    Protected Text.s
    
    GetGrid
    
    ! grid.ListIconGadget = v_listicongadget;
    
    ! grid.columns[v_column].renderCell = function(a, b, c, d) {
    
    !   v_col = parseInt(c.columnId);
    !   v_row = parseInt(a.id);
    
    !   v_lig = grid.ListIconGadget;
    
    Text = GetGadgetItemText(LIG, Row, Col)
    
    !   var td = c;
    
    !   v_callback(v_row, v_col, v_text, td, v_listicongadget);
    
    ! };
    
    
    ! grid.set("columns", dijit.byId(grid).columns);
    ! grid.startup();
    
  EndProcedure   
  
  Procedure ColumnIsSortable(ListIconGadget, Column, IsSortable)
    
    GetGrid
    
    ! var column = grid.columns[v_column];
    ! column.sortable = v_issortable;
    ! grid.set("columns", grid.columns);
    
  EndProcedure
  
  Procedure SetSortCallback(ListIconGadget, Callback)
    
    GetGrid
    
    ! grid.on('dgrid-sort', function (event) {
    !   v_callback(v_listicongadget, event.sort[0].property, event.sort[0].descending);
    ! });
    
  EndProcedure  
  
EndModule